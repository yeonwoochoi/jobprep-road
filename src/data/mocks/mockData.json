{
  "success": true,
  "message": "커리큘럼이 성공적으로 생성되었습니다.",
  "data": {
    "metadata": {
      "title": "AI·데이터 산업 프론트엔드 개발자를 위한 12주 심화 로드맵",
      "description": "최연우님의 기존 Vue/Nuxt/Next.js 역량을 기반으로, AI·데이터 도메인에 특화된 프론트엔드 전문성을 강화하고 React 생태계 및 데이터 시각화 역량을 집중적으로 확보하기 위한 12주 학습 로드맵입니다. 현직 경험과 풀스택 이해도를 바탕으로, 복잡한 데이터 애플리케이션 개발에 필요한 심도 깊은 기술과 비즈니스 통찰력을 갖춘 개발자로 성장하는 것을 목표로 합니다.",
      "targetJobs": [
        "프론트엔드 개발자 (AI·데이터 도메인)",
        "백엔드 개발자 (AI·데이터 도메인)",
        "AI 개발자 (AI·데이터 도메인)",
        "데이터 분석가 (AI·데이터 도메인)"
      ],
      "level": "junior",
      "createdAt": "2024-07-29"
    },
    "skillTree": [
      {
        "categoryName": "핵심 웹 기술 및 언어",
        "description": "모든 프론트엔드 개발의 기반이 되는 필수 기술입니다. 최연우님은 이미 높은 숙련도를 보유하고 계시지만, TypeScript 심화 및 최신 표준 이해를 통해 더욱 견고한 코드를 작성할 수 있습니다.",
        "skills": [
          {
            "name": "JavaScript (ESNext)",
            "importance": "required",
            "description": "최신 ECMAScript 표준에 대한 깊은 이해와 비동기 처리, 모듈 시스템 등에 대한 숙련도."
          },
          {
            "name": "TypeScript",
            "importance": "required",
            "description": "복잡한 타입 시스템, 유틸리티 타입, 고급 타입 추론 등을 활용한 견고한 코드 작성 능력. 특히 대규모 데이터 객체 정의 시 필수."
          },
          {
            "name": "HTML5 & CSS3",
            "importance": "required",
            "description": "웹 표준, 시맨틱 마크업, 웹 접근성(ARIA), 반응형 디자인 및 CSS-in-JS, Utility-First CSS (TailwindCSS) 심화 활용."
          }
        ]
      },
      {
        "categoryName": "프론트엔드 프레임워크 및 생태계",
        "description": "최연우님은 Vue/Nuxt/Next.js에 뛰어난 경험을 가지고 계시지만, AI/데이터 분야에서는 React 생태계의 활용도가 높아 해당 역량 강화에 집중합니다.",
        "skills": [
          {
            "name": "Vue.js (Vue 3, Nuxt.js)",
            "importance": "required",
            "description": "기존 강점 유지 및 최신 버전의 고급 기능(Composition API, Suspense 등) 심화 학습."
          },
          {
            "name": "React.js",
            "importance": "required",
            "description": "Hooks, Context API, HOC, Render Props 등 고급 패턴 및 생태계(Redux, Zustand, React Query/SWR)에 대한 깊이 있는 이해."
          },
          {
            "name": "Next.js",
            "importance": "required",
            "description": "App Router, Server Components, Data Fetching 전략 등 최신 Next.js 기능 및 성능 최적화 심화."
          },
          {
            "name": "상태 관리 (State Management)",
            "importance": "required",
            "description": "Vuex/Pinia 경험을 바탕으로 Redux, Zustand 등 React 생태계의 상태 관리 라이브러리 심층 학습 및 대규모 애플리케이션에 적용."
          }
        ]
      },
      {
        "categoryName": "데이터 처리 및 시각화",
        "description": "AI·데이터 도메인의 핵심 역량으로, 방대한 데이터를 효과적으로 시각화하고 사용자에게 인사이트를 제공하는 능력을 기릅니다.",
        "skills": [
          {
            "name": "데이터 시각화 라이브러리",
            "importance": "required",
            "description": "Chart.js, Recharts, Echarts 등 차트 라이브러리 활용 및 D3.js를 통한 커스텀 시각화 구현 능력."
          },
          {
            "name": "대용량 데이터 렌더링 최적화",
            "importance": "required",
            "description": "가상화(Virtualization), 데이터 그리드, 효율적인 컴포넌트 렌더링 전략 (메모이제이션, Web Workers) 등을 통한 성능 최적화."
          },
          {
            "name": "데이터 Fetching 및 캐싱 전략",
            "importance": "required",
            "description": "React Query, SWR 등 비동기 데이터 관리 라이브러리를 활용한 효율적인 데이터 로딩 및 캐싱, UI 상태 동기화."
          }
        ]
      },
      {
        "categoryName": "품질 및 생산성",
        "description": "안정적이고 확장 가능한 서비스를 구축하기 위한 필수 역량입니다. 테스트, 코드 품질, 협업 도구에 대한 이해를 높입니다.",
        "skills": [
          {
            "name": "테스팅 (Testing)",
            "importance": "required",
            "description": "유닛 테스트 (Jest, React Testing Library), 통합 테스트, E2E 테스트 (Cypress, Playwright) 작성 및 TDD/BDD 방법론 이해."
          },
          {
            "name": "코드 품질 및 개발 도구",
            "importance": "recommended",
            "description": "ESLint, Prettier를 활용한 코드 컨벤션 준수 및 Webpack, Vite 등 번들러 최적화."
          },
          {
            "name": "버전 관리 및 협업 (Git, GitHub)",
            "importance": "required",
            "description": "고급 Git 명령어, Rebase, Cherry-pick, Git Flow 등 협업 워크플로우 숙달."
          }
        ]
      },
      {
        "categoryName": "백엔드 및 인프라 이해",
        "description": "풀스택 경험을 바탕으로, 프론트엔드와 백엔드의 효율적인 연동 및 배포, 운영에 대한 이해를 심화합니다.",
        "skills": [
          {
            "name": "API 통신 (RESTful, GraphQL)",
            "importance": "required",
            "description": "RESTful API 설계 및 연동 심화, GraphQL 이해 및 활용."
          },
          {
            "name": "클라우드 서비스 및 CI/CD",
            "importance": "recommended",
            "description": "AWS S3/CloudFront, Vercel, Netlify 등 배포 플랫폼 이해 및 GitHub Actions를 활용한 CI/CD 파이프라인 구축."
          },
          {
            "name": "보안 (Security)",
            "importance": "nice_to_have",
            "description": "웹 애플리케이션 보안 취약점 (XSS, CSRF 등) 이해 및 방어, 인증/인가 (OAuth, JWT) 구현."
          }
        ]
      },
      {
        "categoryName": "소프트 스킬 및 비즈니스 이해",
        "description": "기술적 역량 외에 실제 비즈니스에 기여하고 팀과 성장하는 데 필요한 역량입니다.",
        "skills": [
          {
            "name": "문제 해결 능력",
            "importance": "required",
            "description": "복잡한 요구사항 분석, 설계, 구현 및 최적화 능력."
          },
          {
            "name": "커뮤니케이션 및 협업",
            "importance": "required",
            "description": "기획, 디자인, 백엔드 팀과의 원활한 소통 및 협업 능력."
          },
          {
            "name": "비즈니스 이해 및 기여",
            "importance": "required",
            "description": "기술적 구현이 비즈니스 목표 달성에 미치는 영향 이해 및 주도적인 기여."
          }
        ]
      }
    ],
    "recommendedResources": [
      {
        "resourceId": "res-001",
        "type": "course",
        "title": "React 완벽 가이드 with Next.js (Udemy / 인프런)",
        "url": "https://www.udemy.com/course/react-complete-guide-incl-hooks-redux/",
        "description": "React의 핵심 개념부터 Hooks, Context API, Redux 등 심화 주제까지 다루는 종합 강의. Next.js와의 연동 및 실전 프로젝트 예제를 포함하여 실용적인 학습에 도움을 줍니다.",
        "platform": "Udemy / 인프런"
      },
      {
        "resourceId": "res-002",
        "type": "course",
        "title": "따라하며 배우는 리액트 (리액트 라우터, MobX, SSR) (인프런)",
        "url": "https://www.inflearn.com/course/%EB%94%B0%EB%9D%BC%ED%95%98%EB%A9%B0-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%A6%AC%EC%95%A1%ED%8A%B8",
        "description": "코드 없는 한글 설명으로 유명한 제로초님의 리액트 강의. 리액트 라우터, MobX(상태 관리), SSR 등 실무에 필요한 주제를 폭넓게 다룹니다.",
        "platform": "인프런"
      },
      {
        "resourceId": "res-003",
        "type": "book",
        "title": "모던 JavaScript 튜토리얼 (The Modern JavaScript Tutorial)",
        "url": "https://ko.javascript.info/",
        "description": "JavaScript의 모든 핵심 개념과 고급 주제를 깊이 있게 다루는 온라인 튜토리얼. TypeScript와의 연관성을 함께 학습하면 시너지가 좋습니다.",
        "platform": "Online Docs"
      },
      {
        "resourceId": "res-004",
        "type": "official_docs",
        "title": "React 공식 문서 (Beta)",
        "url": "https://react.dev/",
        "description": "React의 최신 기능, 개념, 훅스 사용법 등을 가장 정확하게 학습할 수 있는 자료입니다. 특히 새로운 React.dev는 실용적인 예제를 많이 제공합니다.",
        "platform": "React Official Docs"
      },
      {
        "resourceId": "res-005",
        "type": "article",
        "title": "TypeScript 핸드북 (PoiemaWeb)",
        "url": "https://poiemaweb.com/typescript-handbook",
        "description": "TypeScript의 기본부터 고급 타입까지 체계적으로 정리된 한글 자료입니다. 실전 예제를 통해 이해를 돕습니다.",
        "platform": "Velog / 개인 블로그"
      },
      {
        "resourceId": "res-006",
        "type": "course",
        "title": "프론트엔드 테스트 올인원: React, Jest, Testing Library (인프런)",
        "url": "https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%98%AC%EC%9D%B8%EC%9B%90",
        "description": "React 환경에서 Jest와 React Testing Library를 활용한 유닛/통합 테스트 작성법을 배우고, E2E 테스트 도구인 Cypress 사용법까지 익힐 수 있는 강의입니다.",
        "platform": "인프런"
      },
      {
        "resourceId": "res-007",
        "type": "course",
        "title": "D3.js를 활용한 인터랙티브 데이터 시각화 (인프런 / KOCW)",
        "url": "https://www.inflearn.com/course/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8B%9C%EA%B0%81%ED%99%94",
        "description": "데이터 시각화의 기본 개념부터 D3.js를 활용한 다양한 차트 및 인터랙티브 대시보드 구현 방법을 학습합니다. 데이터 바인딩, 스케일, 축 구성 등 핵심 개념을 다룹니다.",
        "platform": "인프런 / KOCW (수학과 시각화 관련 강의)"
      },
      {
        "resourceId": "res-008",
        "type": "project",
        "title": "실전 프로젝트: 금융 대시보드 웹 애플리케이션",
        "url": "https://github.com/your-github/data-dashboard-project (예시)",
        "description": "가상의 금융 데이터를 활용하여 주식 차트, 거래 내역, 포트폴리오 현황 등을 보여주는 대시보드를 React와 데이터 시각화 라이브러리를 활용하여 구축하는 프로젝트입니다. 실시간 데이터 업데이트, 성능 최적화, 사용자 인증 등을 포함합니다.",
        "platform": "Self-Project"
      },
      {
        "resourceId": "res-009",
        "type": "official_docs",
        "title": "Next.js 공식 문서",
        "url": "https://nextjs.org/docs",
        "description": "Next.js의 최신 기능인 App Router, Server Components, Data Fetching 전략 등을 심화 학습하고 공식 예제를 통해 실전 적용 능력을 기릅니다.",
        "platform": "Next.js Official Docs"
      },
      {
        "resourceId": "res-010",
        "type": "article",
        "title": "React Query (TanStack Query) 공식 문서",
        "url": "https://tanstack.com/query/latest/docs/react/overview",
        "description": "React 애플리케이션에서 서버 상태를 효과적으로 관리하고, 데이터 페칭, 캐싱, 동기화를 자동화하는 React Query의 사용법을 학습합니다.",
        "platform": "TanStack Query Official Docs"
      },
      {
        "resourceId": "res-011",
        "type": "course",
        "title": "개발자를 위한 웹 서비스 성능 최적화 (인프런)",
        "url": "https://www.inflearn.com/course/%EC%9B%B9-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94",
        "description": "렌더링 성능, 네트워크 최적화, 이미지 최적화, 캐싱 전략 등 웹 서비스 전반의 성능 최적화 기법을 배울 수 있습니다. 최연우님의 기존 강점과 시너지를 낼 수 있습니다.",
        "platform": "인프런"
      }
    ],
    "weeklyPlan": [
      {
        "week": 1,
        "title": "React 핵심 개념 및 Hooks 마스터하기",
        "description": "최연우님은 Next.js 경험이 있으시기에 React의 기본적인 사용법에는 익숙하실 것입니다. 1주차에는 React의 동작 원리를 깊이 이해하고, Hooks(useState, useEffect, useContext, useCallback, useMemo)를 활용한 컴포넌트 개발에 집중합니다. 최신 React 공식 문서와 핵심 강의를 통해 개념을 견고히 합니다.",
        "learningTopics": [
          {
            "topic": "React의 탄생 배경 및 철학",
            "guideline": "왜 React가 나왔는지, 가상 DOM의 역할, 단방향 데이터 흐름의 중요성을 이해합니다."
          },
          {
            "topic": "JSX 문법 및 컴포넌트 기본",
            "guideline": "JSX의 동작 방식, 함수형 컴포넌트와 클래스형 컴포넌트의 차이(심층), Props 전달과 유효성 검사 (PropTypes/TypeScript)를 학습합니다."
          },
          {
            "topic": "State와 LifeCycle (with Hooks)",
            "guideline": "useState, useEffect, useRef, useLayoutEffect 등 주요 Hooks의 정확한 사용법과 의존성 배열의 역할, 클린업 함수 등을 완벽히 이해하고 실습합니다.",
            "relatedResourceIds": ["res-001", "res-002", "res-004"]
          },
          {
            "topic": "Context API 및 Custom Hooks",
            "guideline": "Context API를 활용한 전역 상태 관리의 장단점, 불필요한 리렌더링 방지 기법, 재사용 가능한 Custom Hooks 생성 및 활용법을 익힙니다."
          }
        ],
        "weeklyTask": "개인 블로그에서 React 기반의 To-Do List 또는 간단한 CRUD 애플리케이션을 Hooks만 사용하여 구현하고, 각 Hook의 목적과 동작 원리를 주석으로 상세히 설명하며 코드 리뷰를 진행합니다."
      },
      {
        "week": 2,
        "title": "TypeScript와 React의 시너지 극대화",
        "description": "최연우님은 TypeScript 경험이 있으시지만, React 환경에서 TypeScript를 더욱 효과적으로 활용하는 방법을 심도 있게 학습합니다. 특히 복잡한 컴포넌트 Props, State, 이벤트 핸들러, 그리고 API 응답 데이터에 대한 타입 정의에 집중하여 견고하고 유지보수하기 쉬운 코드를 작성하는 역량을 강화합니다.",
        "learningTopics": [
          {
            "topic": "React에서 TypeScript 기본 적용",
            "guideline": "Create React App (or Vite) + TypeScript 환경 설정, tsconfig.json 이해, 기본적인 컴포넌트 props와 state 타입 정의 방법을 실습합니다."
          },
          {
            "topic": "복잡한 타입 정의 및 유틸리티 타입",
            "guideline": "인터페이스와 타입 별칭의 차이, 제네릭(Generics) 활용, Pick, Omit, Partial, Required 등 유틸리티 타입을 이용한 복잡한 객체/함수 타입 정의 방법을 학습합니다.",
            "relatedResourceIds": ["res-005"]
          },
          {
            "topic": "이벤트 핸들러 및 Ref 타입",
            "guideline": "HTML DOM 이벤트 객체 타입 정의, 사용자 정의 이벤트 타입 정의, useRef와 forwardRef를 사용할 때의 타입 추론 및 명시 방법을 익힙니다."
          },
          {
            "topic": "API 응답 데이터 타입 정의 및 유효성 검사",
            "guideline": "서버 API 응답 데이터를 위한 인터페이스 설계, Zod/Yup 등 스키마 유효성 검사 라이브러리와의 연동을 통해 런타임 타입 안전성을 확보하는 방법을 탐구합니다."
          }
        ],
        "weeklyTask": "1주차에 구현한 React To-Do List 앱을 TypeScript로 완벽하게 마이그레이션하고, 모든 Props, State, 이벤트 핸들러, 데이터 구조에 명확한 타입을 정의합니다. 더 나아가 유틸리티 타입을 활용하여 코드 중복을 줄이는 연습을 합니다."
      },
      {
        "week": 3,
        "title": "Next.js 14+ 심화: App Router와 Data Fetching",
        "description": "최연우님은 Next.js 경험이 풍부하시므로, 이 주차에는 Next.js 14+의 핵심인 App Router와 Server Components의 개념을 깊이 이해하고, 다양한 Data Fetching 전략(SSR, SSG, ISR, Client-side)을 AI/데이터 서비스 맥락에서 어떻게 효율적으로 적용할지 학습합니다. '취준로드' 프로젝트 경험을 바탕으로, 실제 서비스에 적용할 수 있는 설계 역량을 강화합니다.",
        "learningTopics": [
          {
            "topic": "App Router의 기본 원리 및 파일 시스템 기반 라우팅",
            "guideline": "Page Router와의 차이점, layout.tsx, page.tsx, loading.tsx, error.tsx 등 특수 파일의 역할과 동작 방식을 이해합니다."
          },
          {
            "topic": "Server Components와 Client Components",
            "guideline": "두 컴포넌트의 개념, 역할, 통신 방법, 언제 어떤 컴포넌트를 사용해야 하는지 명확히 구분하고 실습합니다. 'use client' 지시어의 의미를 파악합니다.",
            "relatedResourceIds": ["res-009"]
          },
          {
            "topic": "Data Fetching 전략 심화 (SSR, SSG, ISR, Client-side)",
            "guideline": "getServerSideProps, getStaticProps (Page Router)와 App Router의 async/await, fetch API 확장, revalidate 옵션을 통한 ISR 구현 방법을 비교 분석하고, 각각의 사용 시나리오를 데이터 특성(정적, 실시간 등)에 맞춰 학습합니다."
          },
          {
            "topic": "Next.js 캐싱 메커니즘",
            "guideline": "Request Memoization, Data Cache, Full Route Cache 등 Next.js의 다양한 캐싱 전략을 이해하고, 데이터 변경에 따른 캐시 무효화 및 재검증(Revalidation) 기법을 학습합니다."
          }
        ],
        "weeklyTask": "Next.js App Router를 사용하여 간단한 데이터 대시보드 웹 애플리케이션의 초기 구조를 설계하고 구현합니다. 대시보드 내에서 정적 데이터(SSG)와 동적 데이터(SSR/Client-side)를 혼합하여 보여주며, Server Components와 Client Components를 적절히 분리하여 사용합니다."
      },
      {
        "week": 4,
        "title": "React 상태 관리 심화: Redux, Zustand, Recoil",
        "description": "최연우님은 Vuex, Pinia 경험으로 상태 관리의 중요성을 잘 아실 것입니다. 4주차에는 React 생태계의 주요 상태 관리 라이브러리인 Redux(Redux Toolkit), Zustand, Recoil을 심도 있게 비교 분석하고, 각 라이브러리가 어떤 상황에 적합한지 판단하는 능력을 기릅니다. 특히 데이터 애플리케이션에서 복잡한 전역 상태를 효율적으로 관리하는 패턴에 집중합니다.",
        "learningTopics": [
          {
            "topic": "Redux (Redux Toolkit) 기본 및 심화",
            "guideline": "Redux의 3가지 원칙, Store, Reducer, Action, Dispatch 개념 복습 및 Redux Toolkit을 사용한 효율적인 Store 설정, Slice 정의, 비동기 로직 처리(createAsyncThunk)를 학습합니다.",
            "relatedResourceIds": ["res-001", "res-002"]
          },
          {
            "topic": "Zustand를 이용한 간결한 상태 관리",
            "guideline": "Redux 대비 간결한 문법과 작은 번들 사이즈가 특징인 Zustand의 Hook 기반 상태 관리 방식을 학습하고, 상태 선택(Selector)을 통한 최적화 기법을 실습합니다."
          },
          {
            "topic": "Recoil을 활용한 아토믹 상태 관리",
            "guideline": "Facebook에서 개발한 Recoil의 Atom과 Selector 개념을 이해하고, Suspense 및 Concurrent Mode와의 통합 가능성을 탐색하며 대규모 상태 관리에 어떻게 적용할지 알아봅니다."
          },
          {
            "topic": "상태 관리 라이브러리 선택 기준",
            "guideline": "프로젝트 규모, 팀원 숙련도, 데이터 특성 등을 고려하여 Redux, Zustand, Recoil, Context API 중 적절한 상태 관리 솔루션을 선택하는 기준을 정립합니다."
          }
        ],
        "weeklyTask": "3주차에 시작한 Next.js 데이터 대시보드 프로젝트에 Redux Toolkit 또는 Zustand 중 하나를 선택하여 복잡한 전역 상태(예: 사용자 설정, 필터 조건, 대시보드 레이아웃 상태)를 관리하는 기능을 추가합니다. 상태 변화에 따른 UI 업데이트를 구현하고 성능을 측정해봅니다."
      },
      {
        "week": 5,
        "title": "데이터 Fetching 최적화: React Query / SWR",
        "description": "AI·데이터 서비스는 서버로부터 데이터를 자주 가져오고 캐싱, 동기화가 매우 중요합니다. 5주차에는 React Query(TanStack Query) 또는 SWR과 같은 데이터 페칭 라이브러리를 학습하여, 서버 상태 관리의 복잡성을 줄이고 캐싱, 백그라운드 재검증, 자동 재시도 등을 통해 사용자 경험과 성능을 극대화하는 방법을 익힙니다. 최연우님의 기존 API 연동 경험에 날개를 달아줄 것입니다.",
        "learningTopics": [
          {
            "topic": "Client State vs Server State",
            "guideline": "클라이언트 상태와 서버 상태의 명확한 구분, 왜 서버 상태를 별도로 관리해야 하는지에 대한 필요성을 이해합니다."
          },
          {
            "topic": "React Query (TanStack Query) 핵심 개념",
            "guideline": "QueryClient, useQuery, useMutation, Query Key, Data Invalidation 등 React Query의 주요 개념과 사용법을 학습합니다.",
            "relatedResourceIds": ["res-010"]
          },
          {
            "topic": "React Query 고급 기능",
            "guideline": "캐시 관리(staleTime, cacheTime), 옵티미스틱 업데이트, Infinite Query (무한 스크롤) 구현, 에러 핸들링 및 로딩 상태 처리 등 고급 기능을 실습합니다."
          },
          {
            "topic": "SWR의 특징 및 사용법 (선택 사항)",
            "guideline": "React Query와 유사한 SWR의 useSWR 훅, 자동 재검증, 조건부 페칭 등의 사용법을 비교 분석하고, 상황에 맞는 라이브러리 선택 기준을 강화합니다."
          }
        ],
        "weeklyTask": "Next.js 데이터 대시보드 프로젝트에 React Query 또는 SWR을 도입하여 모든 데이터 페칭 로직을 리팩토링합니다. 캐싱, 로딩/에러 상태 처리, 데이터 변경 시 자동 재검증 기능을 구현하고, 무한 스크롤이 필요한 데이터 목록에 Infinite Query를 적용해봅니다."
      },
      {
        "week": 6,
        "title": "웹 성능 최적화 심화 및 실전 적용",
        "description": "최연우님은 Unity 경험을 통해 성능 최적화의 중요성을 잘 이해하고 계십니다. 6주차에는 웹 환경, 특히 React/Next.js 기반의 데이터 대시보드 애플리케이션에서 발생할 수 있는 성능 문제를 진단하고 해결하는 데 집중합니다. 메모리 관리, 렌더링 최적화, 네트워크 요청 최적화 등 실제 비즈니스 성과로 이어질 수 있는 실질적인 기법을 학습합니다.",
        "learningTopics": [
          {
            "topic": "웹 성능 측정 및 진단 도구",
            "guideline": "Chrome DevTools (Lighthouse, Performance, Memory 탭), Web Vitals, 프로파일링 도구를 사용하여 웹 애플리케이션의 성능 병목 현상을 식별하는 방법을 학습합니다.",
            "relatedResourceIds": ["res-011"]
          },
          {
            "topic": "React 렌더링 최적화 기법",
            "guideline": "React.memo, useCallback, useMemo를 활용한 불필요한 리렌더링 방지, PureComponent, shouldComponentUpdate 등 클래스 컴포넌트 최적화 기법을 비교하고 실습합니다."
          },
          {
            "topic": "대용량 데이터 렌더링: 가상화(Virtualization)와 Lazy Loading",
            "guideline": "react-virtualized, react-window 등 라이브러리를 활용하여 수만 개의 데이터 목록을 효율적으로 렌더링하는 기법을 학습하고, 이미지 및 컴포넌트 Lazy Loading을 적용합니다."
          },
          {
            "topic": "네트워크 및 번들 최적화",
            "guideline": "코드 스플리팅 (Dynamic Imports), 이미지 최적화 (WebP, srcset), Gzip/Brotli 압축, HTTP/2, CDN 활용, Web Workers를 통한 UI 스레드 오프로드 등 다양한 최적화 전략을 알아봅니다."
          }
        ],
        "weeklyTask": "기존 데이터 대시보드 프로젝트의 성능을 Chrome DevTools로 측정하고, 진단된 병목 현상을 React.memo, useCallback, useMemo, 코드 스플리팅, 가상화 라이브러리 적용 등을 통해 개선합니다. 개선 전후의 성능 지표(Lighthouse 점수, FPS, 메모리 사용량)를 비교 분석하여 리포트를 작성합니다."
      },
      {
        "week": 7,
        "title": "데이터 시각화 기초: Chart.js & Recharts",
        "description": "AI·데이터 도메인의 핵심 역량인 데이터 시각화를 본격적으로 시작합니다. 7주차에는 배우기 쉽고 사용성이 좋은 Chart.js와 React 친화적인 Recharts를 사용하여 다양한 유형의 차트(막대, 선, 원, 스캐터)를 구현하고, 데이터를 시각화하는 기본적인 원리를 이해합니다. 실제 데이터를 연동하여 의미 있는 차트를 그려보는 데 중점을 둡니다.",
        "learningTopics": [
          {
            "topic": "데이터 시각화의 기본 원리 및 유형",
            "guideline": "데이터 유형에 따른 적절한 차트 선택, 시각적 인코딩(색상, 크기, 위치), 스토리텔링의 중요성을 학습합니다."
          },
          {
            "topic": "Chart.js를 활용한 기본 차트 구현",
            "guideline": "Chart.js의 설치 및 구성, Dataset, Options 설정, 다양한 차트 유형(Bar, Line, Pie) 구현 및 커스터마이징을 실습합니다."
          },
          {
            "topic": "Recharts를 활용한 React 기반 차트 구현",
            "guideline": "Recharts의 컴포넌트 기반 접근 방식 이해, AreaChart, ComposedChart 등 복잡한 차트 조합, 툴팁/범례/축 등 UI 요소 제어 방법을 학습합니다."
          },
          {
            "topic": "데이터 연동 및 동적 차트",
            "guideline": "React Query로 가져온 데이터를 Chart.js/Recharts에 연동하여 동적으로 업데이트되는 차트를 구현하고, 사용자 인터랙션(필터링, 확대/축소)에 따른 차트 변화를 실습합니다."
          }
        ],
        "weeklyTask": "데이터 대시보드 프로젝트에 Chart.js와 Recharts를 모두 사용하여 최소 3가지 이상의 차트(예: 월별 매출 막대 차트, 일별 사용자 수 선 차트, 제품별 점유율 원형 차트)를 추가합니다. 각 차트의 데이터는 실제 또는 모의 JSON 데이터 API를 통해 가져와 연동합니다. 차트 간의 상호작용(예: 한 차트의 항목 클릭 시 다른 차트 데이터 변경)도 구현해봅니다."
      },
      {
        "week": 8,
        "title": "D3.js 입문 및 커스텀 시각화",
        "description": "7주차에서 배운 차트 라이브러리가 제공하는 틀을 넘어, D3.js를 통해 데이터 시각화를 완전히 제어하는 능력을 기릅니다. D3.js의 핵심 개념(데이터 바인딩, 스케일, 축, 지오메트리)을 이해하고, SVG를 직접 조작하여 커스텀 차트나 인포그래픽을 구현하는 데 집중합니다. AI·데이터 분석 결과의 복잡한 시각화 요구사항을 충족시키기 위한 필수 역량입니다.",
        "learningTopics": [
          {
            "topic": "D3.js의 철학 및 기본 구성 요소",
            "guideline": "데이터-Driven 문서(D3)의 의미, 셀렉션(Selections), 데이터 바인딩(Data Binding), 트랜지션(Transitions) 등 D3.js의 핵심 개념을 학습합니다.",
            "relatedResourceIds": ["res-007"]
          },
          {
            "topic": "SVG 기본 및 D3.js와 SVG 연동",
            "guideline": "SVG의 기본 도형(rect, circle, line, path) 및 속성, 그룹핑, D3.js의 .attr(), .style() 메서드를 이용한 SVG 요소 조작을 실습합니다."
          },
          {
            "topic": "스케일(Scales) 및 축(Axes) 개념과 활용",
            "guideline": "선형 스케일(linear), 시간 스케일(time), 순서형 스케일(band) 등 다양한 스케일 유형을 이해하고, D3.js의 d3.axisBottom(), d3.axisLeft() 등을 이용한 축 생성 및 커스터마이징을 실습합니다."
          },
          {
            "topic": "D3.js로 간단한 차트 구현 (막대, 선)",
            "guideline": "D3.js의 핵심 개념들을 조합하여 간단한 막대 그래프, 선 그래프를 SVG로 직접 그리는 과정을 통해 D3.js의 작동 원리를 체득합니다."
          }
        ],
        "weeklyTask": "React 환경에서 D3.js를 사용하여 커스텀 막대 그래프 또는 선 그래프 컴포넌트를 직접 구현합니다. 외부 JSON 데이터를 불러와 D3.js로 데이터를 바인딩하고, 스케일과 축을 적용하여 동적인 차트를 만듭니다. 데이터 변경 시 차트가 부드럽게 업데이트되는 트랜지션을 추가해봅니다."
      },
      {
        "week": 9,
        "title": "고급 D3.js & 복합 데이터 시각화 프로젝트",
        "description": "8주차에서 익힌 D3.js 기본기를 바탕으로, 더욱 복잡하고 인터랙티브한 시각화를 구현합니다. 다양한 레이아웃(파이, 트리, 포스), 인터랙션(줌, 팬, 툴팁), 그리고 React와의 효율적인 통합 방법을 학습하여 실제 데이터 분석 대시보드에서 활용 가능한 고급 시각화 역량을 확보합니다.",
        "learningTopics": [
          {
            "topic": "D3.js 레이아웃 (Layouts)",
            "guideline": "d3-hierarchy (트리, 팩, 클러스터), d3-force (네트워크), d3-shape (파이, 아크) 등 D3.js의 다양한 레이아웃 모듈을 활용하여 복잡한 데이터 구조를 시각화하는 방법을 학습합니다."
          },
          {
            "topic": "D3.js 인터랙션 및 애니메이션",
            "guideline": "마우스 이벤트 처리(hover, click), 줌(Zoom) 및 팬(Pan) 기능, 트랜지션(Transitions) 및 애니메이션을 활용하여 사용자 친화적인 인터랙티브 차트를 구현합니다."
          },
          {
            "topic": "React와 D3.js의 효율적인 통합",
            "guideline": "D3.js 로직을 React 컴포넌트 내에서 관리하는 최적의 패턴 (useEffect, useRef 활용), D3.js 로직을 재사용 가능한 Custom Hook으로 분리하는 방법을 학습합니다."
          },
          {
            "topic": "복합 데이터 시각화 설계",
            "guideline": "다중 차트 대시보드, 지도 기반 데이터 시각화, 인포그래픽 등 실제 AI·데이터 서비스에서 사용될 수 있는 복합적인 시각화 아이디어를 구상하고 필요한 D3.js 모듈을 탐색합니다."
          }
        ],
        "weeklyTask": "데이터 대시보드 프로젝트에 D3.js를 활용하여 최소 1개 이상의 고급 시각화 컴포넌트(예: 네트워크 그래프, 트리맵, 파이/도넛 차트의 복합 시각화)를 추가합니다. 이 시각화에는 줌/팬 기능, 마우스 오버 시 상세 정보 툴팁 등 인터랙티브 요소를 포함해야 합니다. (핵심 프로젝트: res-008 시작)"
      },
      {
        "week": 10,
        "title": "프론트엔드 테스팅 및 웹 접근성",
        "description": "최연우님은 서비스의 안정적 운영에 기여하는 개발자가 되고자 하는 목표를 가지고 계십니다. 10주차에는 코드 품질을 보장하고 사용자 경험을 개선하는 데 필수적인 테스팅 전략과 웹 접근성(Accessibility)을 심도 있게 다룹니다. 특히 AI/데이터 대시보드처럼 복잡하고 인터랙티브한 애플리케이션의 테스트 전략 수립 및 웹 접근성 구현에 집중합니다.",
        "learningTopics": [
          {
            "topic": "테스팅의 중요성 및 유형 (유닛, 통합, E2E)",
            "guideline": "각 테스트 유형의 목적과 장단점, Jest와 React Testing Library를 활용한 유닛/통합 테스트 작성 전략을 학습합니다. TDD(Test Driven Development) 개념을 이해합니다.",
            "relatedResourceIds": ["res-006"]
          },
          {
            "topic": "React Component 테스팅 (Jest, React Testing Library)",
            "guideline": "컴포넌트 렌더링, 사용자 상호작용 시뮬레이션, 비동기 테스트, Mocking 기법 등 React 컴포넌트 테스트 작성의 모범 사례를 실습합니다."
          },
          {
            "topic": "E2E 테스트 (Cypress/Playwright) 개요",
            "guideline": "사용자 흐름을 자동화하여 전체 애플리케이션의 기능을 검증하는 E2E 테스트의 개념을 이해하고, Cypress 또는 Playwright의 기본적인 사용법과 테스트 스크립트 작성 예시를 살펴봅니다."
          },
          {
            "topic": "웹 접근성(Accessibility)의 중요성 및 ARIA",
            "guideline": "웹 접근성 지침(WCAG)의 이해, 시맨틱 HTML, ARIA(Accessible Rich Internet Applications) 속성을 활용하여 스크린 리더 사용자 및 키보드 사용자 등 다양한 사용자가 웹 서비스를 쉽게 이용할 수 있도록 구현하는 방법을 학습합니다."
          }
        ],
        "weeklyTask": "데이터 대시보드 프로젝트의 핵심 컴포넌트(예: 데이터 필터, 차트 컴포넌트, 테이블 컴포넌트)에 대해 Jest와 React Testing Library를 사용하여 유닛 및 통합 테스트를 작성합니다. 또한 프로젝트의 주요 페이지에 대한 웹 접근성을 점검하고, 필요한 ARIA 속성을 추가하여 접근성을 개선합니다."
      },
      {
        "week": 11,
        "title": "클린 아키텍처, 디자인 시스템 및 배포 전략",
        "description": "점점 복잡해지는 AI·데이터 애플리케이션의 지속 가능한 개발을 위해, 11주차에는 확장성과 유지보수성을 높이는 클린 아키텍처 패턴, 일관된 UI/UX를 위한 디자인 시스템 구축 전략, 그리고 효율적인 배포 및 CI/CD 파이프라인 구축에 대해 학습합니다. 최연우님의 기존 '모듈화된 UI 시스템' 및 '배포' 경험을 더욱 체계화하는 과정이 될 것입니다.",
        "learningTopics": [
          {
            "topic": "프론트엔드 아키텍처 패턴 (MVVM, Clean Architecture 등)",
            "guideline": "컴포넌트 재사용성, 테스트 용이성, 유지보수성을 높이는 프론트엔드 아키텍처 설계 원칙과 실제 적용 사례를 학습합니다."
          },
          {
            "topic": "디자인 시스템 구축 및 Storybook 활용",
            "guideline": "디자인 시스템의 필요성, 원칙, 컴포넌트 기반 UI 개발의 이점, Storybook을 활용한 컴포넌트 문서화 및 개발 환경 구축을 실습합니다."
          },
          {
            "topic": "Next.js 배포 및 CI/CD 파이프라인 구축",
            "guideline": "Vercel, Netlify 등 Next.js 친화적인 배포 플랫폼의 특징과 GitHub Actions를 활용한 자동 빌드, 테스트, 배포 파이프라인 구축 방법을 학습합니다. Docker 개념을 통한 컨테이너 기반 배포도 함께 살펴봅니다."
          },
          {
            "topic": "애플리케이션 모니터링 및 로깅",
            "guideline": "Sentry, New Relic 등 APM(Application Performance Management) 도구를 활용한 에러 트래킹, 성능 모니터링, 로그 수집 및 분석 방법을 학습하여 안정적인 서비스 운영에 기여하는 방법을 알아봅니다."
          }
        ],
        "weeklyTask": "데이터 대시보드 프로젝트에 핵심 UI 컴포넌트(버튼, 입력 필드, 카드 등) 몇 가지를 Storybook으로 분리하고 문서화합니다. 또한, GitHub Actions를 사용하여 프로젝트의 자동 배포 워크플로우를 구성합니다. 만약 가능하다면 Dockerfile을 작성하여 컨테이너 환경에서 애플리케이션이 실행되도록 구성해봅니다."
      },
      {
        "week": 12,
        "title": "포트폴리오 완성, 실전 면접 준비 및 최신 트렌드",
        "description": "12주간의 학습을 마무리하고, 준비한 역량을 효과적으로 보여줄 수 있는 포트폴리오를 완성합니다. 실전 면접 준비를 통해 기술 면접과 코딩 테스트에 대비하고, 앞으로의 기술 성장을 위한 최신 프론트엔드 트렌드를 탐색합니다. 최연우님의 기존 풀스택 및 비즈니스 이해 강점을 적극 어필하는 전략을 수립합니다.",
        "learningTopics": [
          {
            "topic": "포트폴리오 프로젝트 완성 및 기술 블로그 작성",
            "guideline": "1주차부터 진행해온 데이터 대시보드 프로젝트를 최종적으로 다듬고, GitHub README를 상세하게 작성하여 기술 스택, 구현 기능, 트러블슈팅 경험, 학습 내용 등을 명확히 기술합니다. 주요 학습 내용을 벨로그/개인 블로그에 시리즈로 연재하여 기술 정리 및 아웃풋을 만듭니다."
          },
          {
            "topic": "기술 면접 대비 및 모의 면접",
            "guideline": "자료구조, 알고리즘, CS 지식(운영체제, 네트워크, 데이터베이스) 중 프론트엔드 관련 핵심 개념을 복습하고, 예상 질문 리스트를 작성하여 답변을 준비합니다. 친구나 스터디 그룹원과 모의 면접을 진행하며 피드백을 주고받습니다."
          },
          {
            "topic": "코딩 테스트 준비 (JavaScript/TypeScript)",
            "guideline": "프로그래머스, 리트코드 등 플랫폼에서 JavaScript/TypeScript로 코딩 테스트 연습을 꾸준히 진행합니다. 특히 효율적인 알고리즘과 데이터 구조 구현에 중점을 둡니다."
          },
          {
            "topic": "최신 프론트엔드 트렌드 탐색 및 미래 학습 계획",
            "guideline": "WebAssembly, Edge Computing, LLM 기반 UI 등 최신 기술 트렌드를 조사하고, 앞으로 어떤 분야에 더 깊이 학습할지 개인 로드맵을 수립합니다. AI/데이터 분야의 프론트엔드 역할 변화에 대해서도 고민합니다."
          }
        ],
        "weeklyTask": "데이터 대시보드 프로젝트를 완벽하게 마무리하고 GitHub에 배포 가능한 상태로 업로드합니다. 면접에서 나올 만한 'AI·개발·데이터' 도메인 관련 질문(예: '대용량 데이터 시각화 시 성능 최적화 경험은?', 'LLM API 연동 경험을 프론트엔드에서 어떻게 활용했는지?')을 예상하고 답변을 준비합니다. 개인 기술 블로그에 12주간의 학습 여정과 주요 성과를 정리한 회고록을 작성합니다."
      }
    ]
  }
}
